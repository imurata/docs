#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")

apiVersion: v1
kind: Namespace
metadata:
 name: #@ data.values.namespace
---
#@overlay/match by=overlay.not_op(overlay.subset({"kind":"Namespace"})),expects="1+"
---
metadata:
 #@overlay/match missing_ok=True
 namespace: #@ data.values.namespace
---
#@overlay/match by=overlay.subset({"kind":"Ingress","metadata":{"name":"argo-cd-server"}})
---
spec:
  rules:
  #@overlay/match by=overlay.index(0)
  - host: #@ data.values.argocd_host
  tls:
  #@overlay/match by=overlay.index(0)
  - hosts:
    #@overlay/match by=overlay.index(0)
    - #@ data.values.argocd_host
    secretName: #@ data.values.argocd_host
---
#@overlay/match by=overlay.subset({"kind":"Ingress","metadata":{"name":"argo-cd-server-grpc"}})
---
spec:
  rules:
  #@overlay/match by=overlay.index(0)
  - host: #@ data.values.argocd_grpc_host
  tls:
  #@overlay/match by=overlay.index(0)
  - hosts:
    #@overlay/match by=overlay.index(0)
    - #@ data.values.argocd_grpc_host
    secretName: #@ data.values.argocd_grpc_host
---
#@overlay/match by=overlay.subset({"kind":"ClusterRoleBinding"}),expects="1+"
---
subjects:
  #@overlay/match by="kind"
  - kind: ServiceAccount
    namespace: #@ data.values.namespace
---
#@overlay/match by=overlay.subset({"kind":"Deployment","metadata":{"name":"argo-cd-server"}})
---
spec:
  template:
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          #@overlay/match by=overlay.index(0)
          - podAffinityTerm:
              namespaces:
              #@overlay/match by=overlay.index(0)
              - #@ data.values.namespace
---
#@overlay/match by=overlay.subset({"kind":"Service","metadata":{"name":"argo-cd-server"}})
---
metadata:
  #@overlay/match missing_ok=True
  #@overlay/match-child-defaults missing_ok=True 
  annotations:
    projectcontour.io/upstream-protocol.h2c: https,443
---
#@overlay/match by=overlay.subset({"kind":"Ingress","metadata":{"name":"argo-cd-server"}})
---
metadata:
  #@overlay/match missing_ok=True
  #@overlay/match-child-defaults missing_ok=True
  annotations:
    cert-manager.io/issuer: "argo-cd-ca-issuer"
spec:
  rules:
  #@overlay/match by=overlay.index(0)
  - http:
      paths:
      #@overlay/match by=overlay.index(0)
      - backend:
          service:
            #@overlay/match
            name: argo-cd-server
            port:
              #@overlay/match
              name: http  
---
#@overlay/match by=overlay.subset({"kind":"Ingress","metadata":{"name":"argo-cd-server-grpc"}})
---
metadata:
  #@overlay/match missing_ok=True
  #@overlay/match-child-defaults missing_ok=True
  annotations:
    cert-manager.io/issuer: "argo-cd-ca-issuer"
---
#@overlay/match by=overlay.subset({"kind":"StatefulSet","metadata":{"name":"argo-cd-redis-replicas"}})
---
spec:
  template:
    spec:
      containers:
      #@overlay/match by="name"
      - name: redis
        env:
        #@overlay/match by="name"
        - name: REDIS_MASTER_HOST
          value: #@ "argo-cd-redis-master-0.argo-cd-redis-headless." + data.values.namespace + ".svc.cluster.local"
